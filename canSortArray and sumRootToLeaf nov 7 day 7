class Solution {
    public boolean canSortArray(int[] nums) {
        int n = nums.length;
        boolean swapped = true;

        for (int i = 0; i < n; i++) {
            swapped = false;

            for (int j = 0; j < n - i - 1; j++) { // in every pass, the max element bubbles up to the rightmost index
                if (nums[j] <= nums[j + 1]) {
                    // no swap required
                    continue;
                } else {
                    // swap is required
                    if (Integer.bitCount(nums[j]) == Integer.bitCount(nums[j + 1])) {
                        // swapping nums[j] and nums[j + 1]
                        int temp = nums[j];
                        nums[j] = nums[j + 1];
                        nums[j + 1] = temp;
                        swapped = true;
                    } else {
                        // not able to swap, hence can't sort it
                        return false;
                    }
                }
            }

            if (!swapped) { // no swapping was done in the pass, hence array was already sorted
                break; // no more passes are required
            }
        }

        return true;
    }
}

########################### GFG #####################
class Solution {
    // Helper function to calculate sum of root-to-leaf paths
    public static int sumRootToLeaf(Node root, int currentSum) {
        // Base case: if the node is null, return 0
        if (root == null) return 0;

        // Update the current path sum by shifting the digits and adding the current node's value
        currentSum = currentSum * 10 + root.data;

        // If the node is a leaf, return the current path sum
        if (root.left == null && root.right == null) {
            return currentSum;
        }

        // Recursively calculate the sum for left and right subtrees
        int leftSum = sumRootToLeaf(root.left, currentSum);
        int rightSum = sumRootToLeaf(root.right, currentSum);

        // Return the total sum for both subtrees
        return leftSum + rightSum;
    }

    // Main function to be called for calculating the tree paths sum
    public static int treePathsSum(Node root) {
        // Initialize the path sum calculation starting from root with currentSum as 0
        return sumRootToLeaf(root, 0);
    }
}
